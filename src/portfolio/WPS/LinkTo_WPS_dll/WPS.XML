<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WPS</name>
    </assembly>
    <members>
        <member name="T:WPS.Global_Variables_WPS">
            <summary>
            Global variables that are used by WPS to simplify loading content
            </summary>
        </member>
        <member name="T:WPS.ParticleSystemPreSetType">
            <summary>
            Preset type of particle to use when initializing a particle system
            </summary>
        </member>
        <member name="F:WPS.CustomModel.Billboard.Width">
            <summary>
            The width of the billboard
            </summary>
        </member>
        <member name="F:WPS.CustomModel.Billboard.Height">
            <summary>
            The height of the billboard
            </summary>
        </member>
        <member name="M:WPS.CustomModel.Billboard.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            A billboard is a 3D quad that rotates based on the camera position so that the quad is always directly facing the camera
            </summary>
            <param name="center">the center of the billboard</param>
            <param name="width">the width of the billboard</param>
            <param name="height">the height of the billboard</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.CustomModel.Billboard.SetVertexCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the center of the billboard
            </summary>
            <param name="center">the center of the billboard</param>
        </member>
        <member name="M:WPS.CustomModel.Billboard.DrawBillboard(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Draws the billboard with the given texture
            </summary>
            <param name="texture">the texture to place on the billboard</param>
            <param name="View">the view matrix of the camera</param>
            <param name="Projection">the projection matrix of the camera</param>
            <param name="camUp">the camera's Up vector</param>
        </member>
        <member name="M:WPS.DataTexture.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            A data texture is a pair of textures that is used to store information instead of color data.  It automatically uses double buffering to avoid reading and writing to the same target.
            </summary>
            <param name="size">the width or height of the data texture (data textures must be perfect squares ie. width == height)</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.DataTexture.#ctor(System.Int32,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            A data texture is a pair of textures that is used to store information instead of color data.  It automatically uses double buffering to avoid reading and writing to the same target.
            </summary>
            <param name="size">the width or height of the data texture (data textures must be perfect squares ie. width == height)</param>
            <param name="data">the vector4 data to fill the data texture with</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.DataTexture.SetTextureData(Microsoft.Xna.Framework.Vector4[])">
            <summary>
            Sets the texture data
            </summary>
            <param name="data">texture data</param>
        </member>
        <member name="M:WPS.DataTexture.SetTextureDataToZeros">
            <summary>
            Sets the texture data to all zero
            </summary>
        </member>
        <member name="M:WPS.DataTexture.SetTextureDataToNegOnes">
            <summary>
            Sets the texture data to all negative one
            </summary>
        </member>
        <member name="M:WPS.DataTexture.SetTextureDataToNegMil">
            <summary>
            Sets the texture data to all negative one million
            </summary>
        </member>
        <member name="M:WPS.DataTexture.DrawDataToTexture(Microsoft.Xna.Framework.Graphics.Effect,WPS.CustomModel.Quad)">
            <summary>
            Draw the data from the graphics buffer to the texture
            </summary>
            <param name="effect">the effect to use when drawing the quad</param>
            <param name="fullScreenQuad">the quad to use to draw to</param>
        </member>
        <member name="P:WPS.DataTexture.CurrentTexture">
            <summary>
            The current usable texture
            </summary>
        </member>
        <member name="M:WPS.ParticleCollection.#ctor(System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This class stores a collection of verticies to be used to draw many particles at once
            </summary>
            <param name="size">the width or length of the data texture (must be a perfect square texture ie. width == height)</param>
            <param name="texture">the particle display texture</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleCollection.DrawParticleCollection(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Draws the collection of verticies in one call to the GPU
            </summary>
            <param name="View">the view matrix of the camera</param>
            <param name="Projection">the projection matrix of the camera</param>
            <param name="camUp">the camera's Up vector</param>
            <param name="positionTexture">the textrue containing position data</param>
            <param name="dataTexture">the textrue containing alpha, size, and age data</param>
            <param name="ageLimit">the age limit of particles</param>
        </member>
        <member name="M:WPS.Input.CMouse.#ctor">
            <summary>
            A custom mouse class that helps simplify the use of the mouse input.
            </summary>
        </member>
        <member name="M:WPS.Input.CMouse.BeginUpdate">
            <summary>
            This must be called before any of the methods of the custom mouse are used.  (Think of it like spriteBatch.Begin()).
            </summary>
        </member>
        <member name="M:WPS.Input.CMouse.BeginUpdate(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            This must be called before any of the methods of the custom mouse are used.  (Think of it like spriteBatch.Begin()).
            </summary>
            <param name="mState">this is if you want to use your own mouse state as the begin state</param>
        </member>
        <member name="M:WPS.Input.CMouse.EndUpdate">
            <summary>
            This must be called after you are done using the methods of the custom mouse.  (Think of it like spriteBatch.End()).
            </summary>
        </member>
        <member name="M:WPS.Input.CMouse.EndUpdate(Microsoft.Xna.Framework.Input.MouseState)">
            <summary>
            This must be called after you are done using the methods of the custom mouse.  (Think of it like spriteBatch.End()).
            </summary>
            <param name="mState">this is if you want to use your own mouse state as the end state</param>
        </member>
        <member name="M:WPS.Input.CMouse.LeftJustPressed">
            <summary>
            Checks if the left mouse button has just been pressed within the last frame and the current frame
            </summary>
            <returns>true if the button was just pressed within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.LeftJustReleased">
            <summary>
            Checks if the left mouse button has just been released within the last frame and the current frame
            </summary>
            <returns>true if the button was just released within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.LeftHeldDown">
            <summary>
            Checks if the left mouse button was down on the last frame as well as the current frame
            </summary>
            <returns>true if the button was down on the last frame as well as the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.RightJustPressed">
            <summary>
            Checks if the right mouse button has just been pressed within the last frame and the current frame
            </summary>
            <returns>true if the button was just pressed within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.RightJustReleased">
            <summary>
            Checks if the right mouse button has just been released within the last frame and the current frame
            </summary>
            <returns>true if the button was just released within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.RightHeldDown">
            <summary>
            Checks if the right mouse button was down on the last frame as well as the current frame
            </summary>
            <returns>true if the button was down on the last frame as well as the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.MiddleJustPressed">
            <summary>
            Checks if the middle mouse button has just been pressed within the last frame and the current frame
            </summary>
            <returns>true if the button was just pressed within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.MiddleJustReleased">
            <summary>
            Checks if the middle mouse button has just been released within the last frame and the current frame
            </summary>
            <returns>true if the button was just released within the last frame and the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.MiddleHeldDown">
            <summary>
            Checks if the middle mouse button was down on the last frame as well as the current frame
            </summary>
            <returns>true if the button was down on the last frame as well as the current frame</returns>
        </member>
        <member name="M:WPS.Input.CMouse.GetScrollDifference">
            <summary>
            Gets the difference of the scroll wheel from the last frame to the current frame
            </summary>
            <returns>the difference as an int</returns>
        </member>
        <member name="M:WPS.Input.CMouse.GetPositionDifference">
            <summary>
            Gets the difference of the mouse position from the last frame to the current frame
            </summary>
            <returns>the 2D difference in pixels</returns>
        </member>
        <member name="P:WPS.Input.CMouse.CurMouse">
            <summary>
            The current mouse state
            </summary>
        </member>
        <member name="P:WPS.Input.CMouse.LastMouse">
            <summary>
            The previous mouse state
            </summary>
        </member>
        <member name="P:WPS.Input.CMouse.MousePos">
            <summary>
            The 2D position of the mouse on the screen in pixels.
            </summary>
        </member>
        <member name="P:WPS.Input.CMouse.X">
            <summary>
            The X coordinate of the mouse on the screen in pixels.
            </summary>
        </member>
        <member name="P:WPS.Input.CMouse.Y">
            <summary>
            The Y coordinate of the mouse on the screen in pixels.
            </summary>
        </member>
        <member name="M:WPS.WPSAction.ActionAdded(System.Random,WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single)">
            <summary>
            This is used by the particle system and is called when the action is added to the particle system.
            </summary>
            <param name="position">the data texture for the position of the particles</param>
            <param name="velocity">the data texture for the velocity of the particles</param>
            <param name="data">the data texture for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.WPSAction.ActionRemoved(System.Random,WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single)">
            <summary>
            This is used by the particle system and is called when the action is removed from the particle system.
            </summary>
            <param name="position">the data texture for the position of the particles</param>
            <param name="velocity">the data texture for the velocity of the particles</param>
            <param name="data">the data texture for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.WPSAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.WPSAction.ActionAddedCPU(System.Random,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            This is used by the particle system and is called when the action is added to the particle system.
            </summary>
            <param name="position">the data array for the position of the particles</param>
            <param name="velocity">the data array for the velocity of the particles</param>
            <param name="data">the data array for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.WPSAction.ActionRemovedCPU(System.Random,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            This is used by the particle system and is called when the action is removed from the particle system.
            </summary>
            <param name="position">the data array for the position of the particles</param>
            <param name="velocity">the data array for the velocity of the particles</param>
            <param name="data">the data array for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.WPSAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.OrbitAxisAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to attract/repel particles in a particle system to/from a given axis.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="startPoint">a point lying on the desired axis</param>
            <param name="endPoint">a second point lying on the desired axis (cannot be the same as the first)</param>
            <param name="maxRange">the radius of the cylinder-shaped influence of this action</param>
            <param name="magnitude">the "strength" of the pulling/pushing force</param>
            <param name="epsilon">the drop off rate for particles, this gives the gravitational force a more realistic look, particles closer to the axis are acted on stronger than particles at the edge of the range of influence</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.OrbitAxisAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.OrbitAxisAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.SquareBounceAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to provide the particles in a particle system a square-shaped-3D surface to bounce off of.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="planePoint">the center point of the square in 3D space</param>
            <param name="normal">the normal of the square shape (the vector that is perpendicular to the surface of the shape)</param>
            <param name="width">the width of the square shape</param>
            <param name="height">the height of the square shape</param>
            <param name="dampening">the percentage of "force" contained after the bounce (1 means the particle will bounce as high as from where it was dropped onto a flat surface, 0.5 means it will bounce half as high)</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.SquareBounceAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.SquareBounceAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.ScaleAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to update the scale of each particle based on the age of the particle in the particle system.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="endScale">this is the scale that the particle will reach by the end of its life</param>
        </member>
        <member name="M:WPS.ScaleAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.ScaleAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.AgeAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to update the age of each particle by a given amount of arbitrary time and kill the particles that have ages that are grater than the max age of particles in a particle system.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="ageStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.AgeAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.AgeAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="F:WPS.Debugger_WPS.Color">
            <summary>
            The font color
            </summary>
        </member>
        <member name="F:WPS.Debugger_WPS.Font">
            <summary>
            The debugger font
            </summary>
        </member>
        <member name="M:WPS.Debugger_WPS.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            A debugger for the WPS particle system
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Debugger_WPS.DisplayFPSCounter(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Displays a frames per second counter in the given position
            
            *** Does NOT Begin and End the spriteBatch ***
            </summary>
            <param name="spriteBatch">the spriteBatch</param>
            <param name="gameTime">the game time</param>
            <param name="pos">position to draw the data at</param>
        </member>
        <member name="M:WPS.Debugger_WPS.DisplayParticleCount(Microsoft.Xna.Framework.Graphics.SpriteBatch,WPS.ParticleSystem,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Displays a particle count for a given particle system at the given position
            
            *** Does NOT Begin and End the spriteBatch ***
            </summary>
            <param name="spriteBatch">the spriteBatch</param>
            <param name="tps">the particle system to draw</param>
            <param name="pos">the position to draw the data at</param>
        </member>
        <member name="M:WPS.Debugger_WPS.DisplayParticleCount(Microsoft.Xna.Framework.Graphics.SpriteBatch,WPS.ParticleSystemCPU,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Displays a particle count for a given particle system at the given position
            
            *** Does NOT Begin and End the spriteBatch ***
            </summary>
            <param name="spriteBatch">the spriteBatch</param>
            <param name="tps">the particle system to draw</param>
            <param name="pos">the position to draw the data at</param>
        </member>
        <member name="M:WPS.Input.CKeyboard.#ctor">
            <summary>
            A custom keyboard class that simplifies the use of keyboard input
            </summary>
        </member>
        <member name="M:WPS.Input.CKeyboard.BeginUpdate">
            <summary>
            This must be called before any of the methods of the custom keyboard are used.  (Think of it like spriteBatch.Begin()).
            </summary>
        </member>
        <member name="M:WPS.Input.CKeyboard.BeginUpdate(Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            This must be called before any of the methods of the custom keyboard are used.  (Think of it like spriteBatch.Begin()).
            </summary>
            <param name="kState">this is if you want to use your own keyboard state as the begin state</param>
        </member>
        <member name="M:WPS.Input.CKeyboard.EndUpdate">
            <summary>
            This must be called after you are done using the methods of the custom keyboard.  (Think of it like spriteBatch.End()).
            </summary>
        </member>
        <member name="M:WPS.Input.CKeyboard.EndUpdate(Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>
            This must be called after you are done using the methods of the custom keyboard.  (Think of it like spriteBatch.End()).
            </summary>
            <param name="mState">this is if you want to use your own keyboard state as the end state</param>
        </member>
        <member name="M:WPS.Input.CKeyboard.IsKeyBeingPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the given key is down in the current frame
            </summary>
            <param name="key">the key to check</param>
            <returns>true if the key is down in the current frame</returns>
        </member>
        <member name="M:WPS.Input.CKeyboard.IsKeyJustPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the given key is up in the previous frame and down in the current frame
            </summary>
            <param name="key">the key to check</param>
            <returns>true if the key is up in the previous frame and down in the current frame</returns>
        </member>
        <member name="M:WPS.Input.CKeyboard.IsKeyJustReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the given key is down in the previous frame and up in the current frame
            </summary>
            <param name="key">the key to check</param>
            <returns>true if the key is down in the previous frame and up in the current frame</returns>
        </member>
        <member name="M:WPS.Input.CKeyboard.IsKeyBeingHeld(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Checks if the given key is down in the previous frame and down in the current frame
            </summary>
            <param name="key">the key to check</param>
            <returns>true if the key is down in the previous frame and down in the current frame</returns>
        </member>
        <member name="M:WPS.Input.CKeyboard.CurrentKeysDown">
            <summary>
            Gets an array of keys that are down in the current frame
            </summary>
            <returns>array of keys that are down in the current frame</returns>
        </member>
        <member name="M:WPS.Input.CKeyboard.LastKeysDown">
            <summary>
            Gets an array of keys that are down in the previous frame
            </summary>
            <returns>array of keys that are down in the previous frame</returns>
        </member>
        <member name="P:WPS.Input.CKeyboard.CurKeyboard">
            <summary>
            The current keyboard state
            </summary>
        </member>
        <member name="P:WPS.Input.CKeyboard.LastKeyboard">
            <summary>
            The previous keyboard state
            </summary>
        </member>
        <member name="M:WPS.GravityAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to add a gravity-like force to the velocity of each particle in a particle system.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="gravity">the force vector</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.GravityAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.GravityAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.RotateAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to rotate the particles in a particle system by a random amount.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="minRotRevs">this is the minumum number of revolutions that the particle will make during it's lifetime</param>
            <param name="maxRotRevs">this is the minumum number of revolutions that the particle will make during it's lifetime</param>
            <param name="ageStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.RotateAction.ActionAdded(System.Random,WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single)">
            <summary>
            This is used by the particle system and is called when the action is added to the particle system.
            </summary>
            <param name="rnd">the random object</param>
            <param name="position">the data array for the position of the particles</param>
            <param name="velocity">the data array for the velocity of the particles</param>
            <param name="data">the data array for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.RotateAction.ActionRemoved(System.Random,WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single)">
            <summary>
            This is used by the particle system and is called when the action is added to the particle system.
            </summary>
            <param name="rnd">the random object</param>
            <param name="position">the data texture for the position of the particles</param>
            <param name="velocity">the data texture for the velocity of the particles</param>
            <param name="data">the data texture for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.RotateAction.ActionAddedCPU(System.Random,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            This is used by the particle system and is called when the action is added to the particle system.
            </summary>
            <param name="position">the data array for the position of the particles</param>
            <param name="velocity">the data array for the velocity of the particles</param>
            <param name="data">the data array for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.RotateAction.ActionRemovedCPU(System.Random,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            This is used by the particle system and is called when the action is removed from the particle system.
            </summary>
            <param name="position">the data array for the position of the particles</param>
            <param name="velocity">the data array for the velocity of the particles</param>
            <param name="data">the data array for the data values associated with the particles</param>
            <param name="maxAge">the max age of the particles</param>
        </member>
        <member name="M:WPS.SourceAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,WPS.Domain,WPS.Domain,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to spawn/emit new particles from a given position domain with a given velocity domain and a given size and rate.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="posDomain">this is a domain that defines the starting positions of the particles that are emitted</param>
            <param name="velDomain">this is a domain that defines the starting velocities of the particles that are emitted</param>
            <param name="size">this is the scaler size of the particle (1 means a 1x1 sized particle, 0.5 means a 0.5x0.5 sized particle)</param>
            <param name="particle_rate">this is the rate at which new particles are emitted (1 means 1 particle emitted every time the action is applied, 5 means 5 particles are emitted)</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.SourceAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.SourceAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.BoxDomain.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a box-shaped domain (box == cube)
            </summary>
            <param name="center">the center of the box</param>
            <param name="width">the width of the box</param>
            <param name="height">the height of the box</param>
            <param name="depth">the depth of the box</param>
        </member>
        <member name="M:WPS.BoxDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.BoxDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.BoxDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.BoxDomain.SetWidth(System.Single)">
            <summary>
            Set the width
            </summary>
            <param name="width">the width</param>
        </member>
        <member name="M:WPS.BoxDomain.SetHeight(System.Single)">
            <summary>
            Set the height
            </summary>
            <param name="height">the height</param>
        </member>
        <member name="M:WPS.BoxDomain.SetDepth(System.Single)">
            <summary>
            Set the depth
            </summary>
            <param name="depth">the depth</param>
        </member>
        <member name="M:WPS.BoxDomain.GetCenter">
            <summary>
            Get the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.BoxDomain.GetWidth">
            <summary>
            Get the width
            </summary>
            <returns>the width</returns>
        </member>
        <member name="M:WPS.BoxDomain.GetHeight">
            <summary>
            Get the height
            </summary>
            <returns>the height</returns>
        </member>
        <member name="M:WPS.BoxDomain.GetDepth">
            <summary>
            Get the depth
            </summary>
            <returns>the depth</returns>
        </member>
        <member name="M:WPS.ParticleCollectionCPU.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This class stores a collection of verticies to be used to draw many particles at once
            </summary>
            <param name="size">the width or length of the data texture (must be a perfect square texture ie. width == height)</param>
            <param name="texture">the particle display texture</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleCollectionCPU.DrawParticleCollection(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Draws the collection of verticies in one call to the GPU
            </summary>
            <param name="View">the view matrix of the camera</param>
            <param name="Projection">the projection matrix of the camera</param>
            <param name="camUp">the camera's Up vector</param>
            <param name="positionTexture">the textrue containing position data</param>
            <param name="dataTexture">the textrue containing alpha, size, and age data</param>
            <param name="ageLimit">the age limit of particles</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.#ctor(System.Int32,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D,WPS.ParticleSystemVisability,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            The particle system is the main feature of WPS.  It is a simple collection of data textures that track position, velocity, and (alpha, size, age, rotation speed).  To add complexity, you must add "Actions" to the system.  These actions can be permanent or just last a single frame.  Each action is a small set of functionality that when combined with other actions, can cause complex behaviors.
            </summary>
            <param name="maxNumOfParticles">the maximum number of particles allows in the particle system (~=)</param>
            <param name="ageLimit">the age limit of the particles in the particle system</param>
            <param name="particleTexture">the display texture for the particles in the particle system</param>
            <param name="particleVisability">use ALPHA for particles that would represent fire, and use OPAQUE for particles that would represent smoke</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.#ctor(System.Int32,System.Single,WPS.ParticleSystemPreSetType,WPS.ParticleSystemVisability,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            The particle system is the main feature of WPS.  It is a simple collection of data textures that track position, velocity, and (alpha, size, and age).  To add complexity, you must add "Actions" to the system.  These actions can be permanent or just last a single frame.  Each action is a small set of functionality that when combined with other actions, can cause complex behaviors.
            </summary>
            <param name="maxNumOfParticles">the maximum number of particles allows in the particle system (~=)</param>
            <param name="ageLimit">the age limit of the particles in the particle system</param>
            <param name="particlePreSetType">for simplicity, you can use a preset type of particle that uses pre-made textures for the particles in the particle system</param>
            <param name="particleVisability">use ALPHA for particles that would represent fire, and use OPAQUE for particles that would represent smoke</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.AddActionForThisFrame(WPS.WPSAction)">
            <summary>
            Adds an action to the list of actions to be applied this frame
            </summary>
            <param name="action">the action to be applied</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.AddPermanentAction(WPS.WPSAction)">
            <summary>
            Adds an action to the list of actions that will be applied for every frame until it is removed
            </summary>
            <param name="action">the action to be applied</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.RemovePermanentAction(WPS.WPSAction)">
            <summary>
            Removes an action from the list of actions that will be applied for every frame
            </summary>
            <param name="action">the action to be removed</param>
            <returns>true if the action was successfully removed</returns>
        </member>
        <member name="M:WPS.ParticleSystemCPU.ApplyActions">
            <summary>
            This applies the actions from the list of permanent actions and then the list of actions to be applied for this frame
            </summary>
        </member>
        <member name="M:WPS.ParticleSystemCPU.DrawParticles(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
            <summary>
            This draws the particles to the screen
            </summary>
            <param name="view">the view matrix for the camera</param>
            <param name="projection">the projection matrix for the camera</param>
            <param name="up">the camera's Up vector</param>
        </member>
        <member name="M:WPS.ParticleSystemCPU.GetActiveParticleCount">
            <summary>
            Gets the number of active particles
            </summary>
            <returns>the number of active particles</returns>
        </member>
        <member name="M:WPS.ParticleSystemCPU.GetInactiveParticleCount">
            <summary>
            Gets the number of inactive particles
            </summary>
            <returns>the number of inactive particles</returns>
        </member>
        <member name="M:WPS.FadeAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to use the ratio of the current age of each particle and its maximum age to calculate the alpha of each particle in a particle system.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.FadeAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.FadeAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.ZeroVelAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            It's purpose is to change the velocity of all the particles in the particle system to 0.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ZeroVelAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.ZeroVelAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.KillAllAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to de-activate all the particles in a particle system.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.KillAllAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.KillAllAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.OrbitRingAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to attract/repel particles in a particle system to/from a given ring-shaped line.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="center">the 3D point where the center of the ring is</param>
            <param name="normal">the normal of the ring (perpendicular to the ring)</param>
            <param name="radius">the radius of the ring from its center</param>
            <param name="maxRange">the radius of the donut-shaped influence of this action</param>
            <param name="magnitude">the "strength" of the pulling/pushing force</param>
            <param name="epsilon">the drop off rate for particles, this gives the gravitational force a more realistic look, particles closer to the line are acted on stronger than particles at the edge of the range of influence</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.OrbitRingAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.OrbitRingAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.RingDomain.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a ring-shaped domain that is a single, circular line.
            </summary>
            <param name="center">the center of the ring</param>
            <param name="normal">the normal of the ring (perpendicular to ring)</param>
            <param name="radius">the radius of the ring</param>
        </member>
        <member name="M:WPS.RingDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.RingDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain *currently not implemented
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.RingDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.RingDomain.SetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the normal
            </summary>
            <param name="normal">the normal</param>
        </member>
        <member name="M:WPS.RingDomain.SetRadius(System.Single)">
            <summary>
            Sets the radius
            </summary>
            <param name="radius">the radius</param>
        </member>
        <member name="M:WPS.RingDomain.GetCenter">
            <summary>
            Gets the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.RingDomain.GetNormal">
            <summary>
            Gets the normal
            </summary>
            <returns>the normal</returns>
        </member>
        <member name="M:WPS.RingDomain.GetRadius">
            <summary>
            Gets the radius
            </summary>
            <returns>the radius</returns>
        </member>
        <member name="M:WPS.CustomModel.CModel.#ctor(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is a custom model class that simplifies the drawing of models
            </summary>
            <param name="Model">the pre-loaded model ie: Content.Load[lessthan]Model[greaterthan](string locationOfModel);</param>
            <param name="Position">the position of the model</param>
            <param name="Rotation">the rotation of the model</param>
            <param name="Scale">the scale of the model</param>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.CustomModel.CModel.Draw(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Draws the model using the basic effect class
            </summary>
            <param name="View">the view matrix of the camera</param>
            <param name="Projection">the projection matrix of the camera</param>
        </member>
        <member name="M:WPS.CustomModel.CModel.GetWorld">
            <summary>
            Gets the World matrix of the camera
            </summary>
            <returns>world matrix of the camera</returns>
        </member>
        <member name="M:WPS.CustomModel.CModel.GetNormalMatrix">
            <summary>
            Gets the normal matrix of the camera
            </summary>
            <returns>normal matrix of the camera</returns>
        </member>
        <member name="M:WPS.CustomModel.CModel.CacheEffect">
            <summary>
            Store references to all of the model's current effects * currently doesn't work
            </summary>
        </member>
        <member name="M:WPS.CustomModel.CModel.RestoreEffects">
            <summary>
            Restore the effects referenced by the model's cache *currently doesn't work
            </summary>
        </member>
        <member name="M:WPS.CustomModel.CModel.SetModelEffect(Microsoft.Xna.Framework.Graphics.Effect,System.Boolean)">
            <summary>
            Sets the effect used by the model *currently doesn't work
            </summary>
            <param name="effect">the effect</param>
            <param name="CopyEffect">if true, the effect is copyied over</param>
        </member>
        <member name="P:WPS.CustomModel.CModel.Position">
            <summary>
            The position of the model
            </summary>
        </member>
        <member name="P:WPS.CustomModel.CModel.Rotation">
            <summary>
            The rotation of the model
            </summary>
        </member>
        <member name="P:WPS.CustomModel.CModel.Scale">
            <summary>
            The scale of the model
            </summary>
        </member>
        <member name="P:WPS.CustomModel.CModel.Model">
            <summary>
            The actual model object
            </summary>
        </member>
        <member name="P:WPS.CustomModel.CModel.BoundingSphere">
            <summary>
            The model's bounding sphere
            </summary>
        </member>
        <member name="M:WPS.PlaneBounceAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to provide the particles in the particle system an infinite plane to bounce off of.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="planePoint">a point that lies on the plane</param>
            <param name="normal">the normal of the plane (perpendicular vector to the surface of the plane)</param>
            <param name="dampening">the percentage of "force" contained after the bounce (1 means the particle will bounce as high as from where it was dropped onto a flat surface, 0.5 means it will bounce half as high)</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.PlaneBounceAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.PlaneBounceAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.DiscBounceAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to provide the particles in a particle system a disc-shaped-3D surface for particles to bounce off of.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="center">the center point of the disc</param>
            <param name="normal">the normal vector of the disc (perpendicular to the surface of the disc)</param>
            <param name="radius">the radius of the disc</param>
            <param name="dampening">the percentage of "force" contained after the bounce (1 means the particle will bounce as high as from where it was dropped onto a flat surface, 0.5 means it will bounce half as high)</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.DiscBounceAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.DiscBounceAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.SphereDomain.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a sphere-shaped domain.
            </summary>
            <param name="center">center of the sphere</param>
            <param name="radius">the radius of the sphere</param>
        </member>
        <member name="M:WPS.SphereDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.SphereDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.SphereDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.SphereDomain.SetRadius(System.Single)">
            <summary>
            Sets the radius
            </summary>
            <param name="radius">the radius</param>
        </member>
        <member name="M:WPS.SphereDomain.GetCenter">
            <summary>
            Gets the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.SphereDomain.GetRadius">
            <summary>
            Gets the radius
            </summary>
            <returns>the radius</returns>
        </member>
        <member name="M:WPS.CustomModel.Quad.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            The quad is basically a 2D square in 3D space
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.CustomModel.Quad.RenderFullScreenQuad(Microsoft.Xna.Framework.Graphics.Effect,System.Int32)">
            <summary>
            Draws a quad that takes up the entire screen.  Used for data textures that use the GPU to store data into textures.
            </summary>
            <param name="effect">the effect to be used when drawing the quad</param>
            <param name="size">the length or width of the texture (must be a perfectly square texture to work correctly)</param>
        </member>
        <member name="M:WPS.CustomModel.Quad.RenderQuad(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Draws a quad with a given effect at a given position
            </summary>
            <param name="effect">the effect to be used to draw the quad</param>
            <param name="v1">the top right vertex</param>
            <param name="v2">the top left vertex</param>
            <param name="v3">the bottom left vertex</param>
            <param name="v4">the bottom right vertex</param>
        </member>
        <member name="M:WPS.Camera.Camera.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This is the generic camera class that is used by other camera types like: TargetCamera, FreeCamera, ChaseCamera, and ArcBallCamera
            </summary>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Camera.Camera.Update">
            <summary>
            Updates the camera
            </summary>
        </member>
        <member name="M:WPS.Camera.Camera.BoundingVolumeIsInView(Microsoft.Xna.Framework.BoundingSphere)">
            <summary>
            Checks if a bounding sphere is within the view of the camera
            </summary>
            <param name="sphere">the bounding sphere to check</param>
            <returns>true if the bounding sphere is within the view of the camera</returns>
        </member>
        <member name="M:WPS.Camera.Camera.BoundingVolumeIsInView(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Checks if a bounding box is within the view of the camera
            </summary>
            <param name="sphere">the bounding box to check</param>
            <returns>true if the bounding box is within the view of the camera</returns>
        </member>
        <member name="P:WPS.Camera.Camera.View">
            <summary>
            The view matrix for the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.Camera.Projection">
            <summary>
            The projection matrix for the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.Camera.Frustum">
            <summary>
            The bounding frustrum for the camera
            </summary>
        </member>
        <member name="M:WPS.ParticleSystem.#ctor(System.Int32,System.Single,Microsoft.Xna.Framework.Graphics.Texture2D,WPS.ParticleSystemVisability,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            The particle system is the main feature of WPS.  It is a simple collection of data textures that track position, velocity, and (alpha, size, age, rotation speed).  To add complexity, you must add "Actions" to the system.  These actions can be permanent or just last a single frame.  Each action is a small set of functionality that when combined with other actions, can cause complex behaviors.
            </summary>
            <param name="maxNumOfParticles">the maximum number of particles allows in the particle system (~=)</param>
            <param name="ageLimit">the age limit of the particles in the particle system</param>
            <param name="particleTexture">the display texture for the particles in the particle system</param>
            <param name="particleVisability">use ALPHA for particles that would represent fire, and use OPAQUE for particles that would represent smoke</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleSystem.#ctor(System.Int32,System.Single,WPS.ParticleSystemPreSetType,WPS.ParticleSystemVisability,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            The particle system is the main feature of WPS.  It is a simple collection of data textures that track position, velocity, and (alpha, size, and age).  To add complexity, you must add "Actions" to the system.  These actions can be permanent or just last a single frame.  Each action is a small set of functionality that when combined with other actions, can cause complex behaviors.
            </summary>
            <param name="maxNumOfParticles">the maximum number of particles allows in the particle system (~=)</param>
            <param name="ageLimit">the age limit of the particles in the particle system</param>
            <param name="particlePreSetType">for simplicity, you can use a preset type of particle that uses pre-made textures for the particles in the particle system</param>
            <param name="particleVisability">use ALPHA for particles that would represent fire, and use OPAQUE for particles that would represent smoke</param>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.ParticleSystem.AddActionForThisFrame(WPS.WPSAction)">
            <summary>
            Adds an action to the list of actions to be applied this frame
            </summary>
            <param name="action">the action to be applied</param>
        </member>
        <member name="M:WPS.ParticleSystem.AddPermanentAction(WPS.WPSAction)">
            <summary>
            Adds an action to the list of actions that will be applied for every frame until it is removed
            </summary>
            <param name="action">the action to be applied</param>
        </member>
        <member name="M:WPS.ParticleSystem.RemovePermanentAction(WPS.WPSAction)">
            <summary>
            Removes an action from the list of actions that will be applied for every frame
            </summary>
            <param name="action">the action to be removed</param>
            <returns>true if the action was successfully removed</returns>
        </member>
        <member name="M:WPS.ParticleSystem.ApplyActions">
            <summary>
            This applies the actions from the list of permanent actions and then the list of actions to be applied for this frame
            </summary>
        </member>
        <member name="M:WPS.ParticleSystem.DrawParticles(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
            <summary>
            This draws the particles to the screen
            </summary>
            <param name="view">the view matrix for the camera</param>
            <param name="projection">the projection matrix for the camera</param>
            <param name="up">the camera's Up vector</param>
        </member>
        <member name="M:WPS.ParticleSystem.GetActiveParticleCount">
            <summary>
            Gets the number of active particles
            </summary>
            <returns>the number of active particles</returns>
        </member>
        <member name="M:WPS.ParticleSystem.GetInactiveParticleCount">
            <summary>
            Gets the number of inactive particles
            </summary>
            <returns>the number of inactive particles</returns>
        </member>
        <member name="M:WPS.Camera.FreeCamera.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This type of camera is good for a free-flying camera such as one used in a 3D map editor
            </summary>
            <param name="Position">position of the camera</param>
            <param name="Yaw">the yaw rotation of the camera</param>
            <param name="Pitch">the pitch rotation of the camera</param>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Camera.FreeCamera.Rotate(System.Single,System.Single)">
            <summary>
            This rotates the camera given a yaw and a pitch rotation change
            </summary>
            <param name="YawChange">the change in yaw rotation</param>
            <param name="PitchChange">the change in pitch rotation</param>
        </member>
        <member name="M:WPS.Camera.FreeCamera.Move(Microsoft.Xna.Framework.Vector3)">
            <summary>
            This moves the camera in the given direction by the given amount
            </summary>
            <param name="Translation">the vector to add to the position</param>
        </member>
        <member name="M:WPS.Camera.FreeCamera.Update">
            <summary>
            This updates the camera so that it is looking in the correct direction with the correct rotations
            </summary>
        </member>
        <member name="P:WPS.Camera.FreeCamera.Yaw">
            <summary>
            The yaw of the camera (similar to the Y rotation)
            </summary>
        </member>
        <member name="P:WPS.Camera.FreeCamera.Pitch">
            <summary>
            The pitch of the camera (similar to the X rotation)
            </summary>
        </member>
        <member name="P:WPS.Camera.FreeCamera.Position">
            <summary>
            The 3D position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.FreeCamera.Target">
            <summary>
            THe 3D position the camera is aimed at
            </summary>
        </member>
        <member name="P:WPS.Camera.FreeCamera.Up">
            <summary>
            The Up vector of the camera
            </summary>
        </member>
        <member name="M:WPS.Camera.TargetCamera.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This type of camera takes a position and aims at a given target
            </summary>
            <param name="Position">the position of the camera</param>
            <param name="Target">the position that the camera will point at</param>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Camera.TargetCamera.Update">
            <summary>
            This updates the camera so that it is looking at the correct target
            </summary>
        </member>
        <member name="P:WPS.Camera.TargetCamera.Position">
            <summary>
            The 3D position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.TargetCamera.Target">
            <summary>
            The 3D position that the camera is pointing at
            </summary>
        </member>
        <member name="P:WPS.Camera.TargetCamera.Up">
            <summary>
            The Up vector for the camera
            </summary>
        </member>
        <member name="M:WPS.Camera.ArcBallCamera.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This type of camera is useful for inspecting a single object or scene as it rotates around a given point in 3D.
            </summary>
            <param name="Target">the target position of the camera</param>
            <param name="RotationX">the x rotation of the camera</param>
            <param name="RotationY">the y rotation of the camera</param>
            <param name="MinRotationY">the minimum y rotation limit</param>
            <param name="MaxRotationY">the maximum y rotation limit</param>
            <param name="Distance">the distance of the camera from the target</param>
            <param name="MinDistance">the minimum distance limit of the camera</param>
            <param name="MaxDistance">the maximum distance limit of the camera</param>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Camera.ArcBallCamera.Move(System.Single)">
            <summary>
            Basically zooms the camera in and out by a given about
            </summary>
            <param name="DistanceChange">the change in distance</param>
        </member>
        <member name="M:WPS.Camera.ArcBallCamera.Rotate(System.Single,System.Single)">
            <summary>
            Rotates the camera about a target point by a given x and y rotational change
            </summary>
            <param name="RotationXChange">the x rotation change</param>
            <param name="RotationYChange">the y rotation change</param>
        </member>
        <member name="M:WPS.Camera.ArcBallCamera.Translate(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Moves the camera by a given amount
            </summary>
            <param name="PositionChange">the vector to add to the position of the camera</param>
        </member>
        <member name="M:WPS.Camera.ArcBallCamera.Update">
            <summary>
            Updates the camera so that it is pointing in the correct direction and has the correct rotation
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.RotationX">
            <summary>
            Rotation around the X axis
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.RotationY">
            <summary>
            Rotation around the Y axis
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.MinRotationY">
            <summary>
            The Y axis rotation minimum limit (radians)
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.MaxRotationY">
            <summary>
            The Y axis rotation maximum limit (radians)
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.Distance">
            <summary>
            Distance between the target and camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.MinDistance">
            <summary>
            The distance minimum limit
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.MaxDistance">
            <summary>
            The distance maximum limit
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.Position">
            <summary>
            The position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.Target">
            <summary>
            The position the camera is aiming at
            </summary>
        </member>
        <member name="P:WPS.Camera.ArcBallCamera.Up">
            <summary>
            The up vector of the camera
            </summary>
        </member>
        <member name="M:WPS.OrbitLineAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to attract/repel particles in a particle system to/from a given line segment.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="startPoint">the 3D point where the line starts</param>
            <param name="endPoint">the 3D point where the line ends</param>
            <param name="maxRange">the radius of the cylinder-shaped influence of this action</param>
            <param name="magnitude">the "strength" of the pulling/pushing force</param>
            <param name="epsilon">the drop off rate for particles, this gives the gravitational force a more realistic look, particles closer to the line are acted on stronger than particles at the edge of the range of influence</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.OrbitLineAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.OrbitLineAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.CylinderDomain.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a cylinder-shaped domain
            </summary>
            <param name="center">center of the cylinder</param>
            <param name="normal">the normal of the cylinder (the normal runs up the length of the cylinder)</param>
            <param name="length">the length of the cylinder</param>
            <param name="outerRadius">the outer radius of the cylinder</param>
            <param name="innerRadius">the inner radius of the cylinder (can create a solid cylinder by using 0)</param>
        </member>
        <member name="M:WPS.CylinderDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.CylinderDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain *currently not implemented
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.CylinderDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.CylinderDomain.SetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the normal
            </summary>
            <param name="normal">the normal</param>
        </member>
        <member name="M:WPS.CylinderDomain.SetLength(System.Single)">
            <summary>
            Set the length
            </summary>
            <param name="length">the length</param>
        </member>
        <member name="M:WPS.CylinderDomain.SetOuterRadius(System.Single)">
            <summary>
            Set the outer radius
            </summary>
            <param name="outerRadius">the outer radius</param>
        </member>
        <member name="M:WPS.CylinderDomain.SetInnerRadius(System.Single)">
            <summary>
            Set the inner radius
            </summary>
            <param name="innerRadius">the inner radius</param>
        </member>
        <member name="M:WPS.CylinderDomain.GetCenter">
            <summary>
            Get the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.CylinderDomain.GetNormal">
            <summary>
            Get the normal
            </summary>
            <returns>the normal</returns>
        </member>
        <member name="M:WPS.CylinderDomain.GetLength">
            <summary>
            Get the length
            </summary>
            <returns>the length</returns>
        </member>
        <member name="M:WPS.CylinderDomain.GetOuterRadius">
            <summary>
            Get the outer radius
            </summary>
            <returns>the outer radius</returns>
        </member>
        <member name="M:WPS.CylinderDomain.GetInnerRadius">
            <summary>
            Get the inner radius
            </summary>
            <returns>the inner radius</returns>
        </member>
        <member name="M:WPS.LineDomain.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a line-shaped domain.
            </summary>
            <param name="startPoint">the start point of the line</param>
            <param name="endPoint">the end point of the line</param>
        </member>
        <member name="M:WPS.LineDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.LineDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.LineDomain.SetStartPoint(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the start point
            </summary>
            <param name="startPoint">the start point</param>
        </member>
        <member name="M:WPS.LineDomain.SetEndPoint(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the end point
            </summary>
            <param name="endPoint">the end point</param>
        </member>
        <member name="M:WPS.LineDomain.GetStartPoint">
            <summary>
            Get the start point
            </summary>
            <returns>the start point</returns>
        </member>
        <member name="M:WPS.LineDomain.GetEndPoint">
            <summary>
            Get the end point
            </summary>
            <returns>the end point</returns>
        </member>
        <member name="M:WPS.MoveAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to add the velocity of each particle in a particle system to its position.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.MoveAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.MoveAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.SquareDomain.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a 2D-square-shape in 3D domain.
            </summary>
            <param name="center">the center of the square</param>
            <param name="normal">the normal of the square (perpendicular to the surface of the square)</param>
            <param name="width">the width of the square</param>
            <param name="height">the height of the square</param>
        </member>
        <member name="M:WPS.SquareDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.SquareDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain *currently not implemented
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.SquareDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.SquareDomain.SetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the normal
            </summary>
            <param name="normal">the normal</param>
        </member>
        <member name="M:WPS.SquareDomain.SetWidth(System.Single)">
            <summary>
            Set the width
            </summary>
            <param name="width">the width</param>
        </member>
        <member name="M:WPS.SquareDomain.SetHeight(System.Single)">
            <summary>
            Set the height
            </summary>
            <param name="height">the height</param>
        </member>
        <member name="M:WPS.SquareDomain.GetCenter">
            <summary>
            Get the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.SquareDomain.GetNormal">
            <summary>
            Get the normal
            </summary>
            <returns>the normal</returns>
        </member>
        <member name="M:WPS.SquareDomain.GetWidth">
            <summary>
            Get the width
            </summary>
            <returns>the width</returns>
        </member>
        <member name="M:WPS.SquareDomain.GetHeight">
            <summary>
            Get the height
            </summary>
            <returns>the height</returns>
        </member>
        <member name="M:WPS.PointDomain.#ctor(Microsoft.Xna.Framework.Vector3)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a single point in space which returns this point when getting a random vector in the domain
            </summary>
            <param name="point">the point</param>
        </member>
        <member name="M:WPS.PointDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.PointDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.PointDomain.SetPoint(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the point
            </summary>
            <param name="point">the point</param>
        </member>
        <member name="M:WPS.PointDomain.GetPoint">
            <summary>
            Gets the point
            </summary>
            <returns>the point</returns>
        </member>
        <member name="M:WPS.CustomModel.MeshTag.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single)">
            <summary>
            Mesh tag for use by the CModel class
            </summary>
            <param name="Color">color data</param>
            <param name="Texture">texture data</param>
            <param name="SpecularPower">specular data</param>
        </member>
        <member name="M:WPS.Camera.ChaseCamera.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            This type of camera is useful for 3rd person games where the camera is following behind the playerand rotates with the character
            </summary>
            <param name="PositionOffset">the relative position of the camera behind the target</param>
            <param name="TargetOffset">the relative offset from the target</param>
            <param name="RelativeCameraRotation">the relative camera rotation</param>
            <param name="graphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
        </member>
        <member name="M:WPS.Camera.ChaseCamera.Move(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            This moves the camera so that it is following a given target
            </summary>
            <param name="NewFollowTargetPosition">the newest position of the target</param>
            <param name="NewFollowTargetRotation">the newest rotation of the target</param>
        </member>
        <member name="M:WPS.Camera.ChaseCamera.Rotate(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Rotates the camera relative to the camera
            </summary>
            <param name="RotationChange">relative rotation change</param>
        </member>
        <member name="M:WPS.Camera.ChaseCamera.Update">
            <summary>
            This updates the camera so that it is looking in the right direction with the right rotation
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.Position">
            <summary>
            The 3D position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.Target">
            <summary>
            The 3D position that the camera is aiming at
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.FollowTargetPosition">
            <summary>
            The position of the follow target
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.FollowTargetRotation">
            <summary>
            The rotation of the follow target
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.PositionOffset">
            <summary>
            The offset of position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.TargetOffset">
            <summary>
            The offset on the target position of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.RelativeCameraRotation">
            <summary>
            The camera rotation relative to the camera's up-right rotation
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.Up">
            <summary>
            The Up vector of the camera
            </summary>
        </member>
        <member name="P:WPS.Camera.ChaseCamera.Springiness">
            <summary>
            The "springiness" is the amount that the camera can "fudge" when following a target
            </summary>
        </member>
        <member name="M:WPS.OrbitPointAction.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Vector3,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            This is a particle system action that can be permanently, or for a single frame, applied to a particle system.
            
            The purpose of this action is to attract/repel particles within a given range to/from a single point in 3D space.
            </summary>
            <param name="GraphicsDevice">just use the GraphicsDevice parameter that is contained within the Game1 class</param>
            <param name="Content">just use the Content parameter that is contained within the Game1 class</param>
            <param name="orbitPoint">point that particles will be attracted to or repelled from</param>
            <param name="maxRange">the radius of the sphere-shaped influence of this action</param>
            <param name="magnitude">the "strength" of the pulling/pushing force</param>
            <param name="epsilon">the drop off rate for particles, this gives the gravitational force a more realistic look, particles closer to the center are acted on stronger than particles at the edge of the range of influence</param>
            <param name="timeStep">the amount of arbitrary time that this action takes to complete (1 means the action takes place at full speed, 0.5 means the action takes place at half-speed)</param>
        </member>
        <member name="M:WPS.OrbitPointAction.ApplyAction(WPS.DataTexture,WPS.DataTexture,WPS.DataTexture,System.Single,WPS.CustomModel.Quad)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data texture that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data texture that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data texture that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
            <param name="quad">this is a quad that is designed to provide a place to capture the data from the GPU when the action alters any data texture</param>
        </member>
        <member name="M:WPS.OrbitPointAction.ApplyActionCPU(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Vector4[],System.Single)">
            <summary>
            Calling this method will put the action into effect.
            </summary>
            <param name="position">this is the data array that holds the positions of all the particles in the particle system</param>
            <param name="velocity">this is the data array that holds the velocities of all the particles in the particle system</param>
            <param name="data">this is the data array that holds the data (as in alpha, size, and age) of all the particles in the particle system</param>
            <param name="maxAge">this is the maximum age of the particles in the particle system</param>
        </member>
        <member name="M:WPS.DiscDomain.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            A domain is a 3D space that is a defined by values that describe the shape and position of the domain.
            
            This is a disc-shaped domain.
            </summary>
            <param name="center">the center of the disc</param>
            <param name="normal">the normal of the disc (perpendicular to the surface of the disc)</param>
            <param name="radius">the radius of the disc</param>
        </member>
        <member name="M:WPS.DiscDomain.GetRandomVectorInDomain">
            <summary>
            Gets a random position that is contained within the domain
            </summary>
            <returns>3D position contained within the domain</returns>
        </member>
        <member name="M:WPS.DiscDomain.IsVectorInDomain(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the given vector is contained within the domain *currently not implemented
            </summary>
            <param name="v">the vector to check</param>
            <returns>true if the vector is contained within the domain</returns>
        </member>
        <member name="M:WPS.DiscDomain.SetCenter(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the center
            </summary>
            <param name="center">the center</param>
        </member>
        <member name="M:WPS.DiscDomain.SetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Set the normal
            </summary>
            <param name="normal">the normal</param>
        </member>
        <member name="M:WPS.DiscDomain.SetRadius(System.Single)">
            <summary>
            Set the radius
            </summary>
            <param name="radius">the radius</param>
        </member>
        <member name="M:WPS.DiscDomain.GetCenter">
            <summary>
            Get the center
            </summary>
            <returns>the center</returns>
        </member>
        <member name="M:WPS.DiscDomain.GetNormal">
            <summary>
            Get the normal
            </summary>
            <returns>the normal</returns>
        </member>
        <member name="M:WPS.DiscDomain.GetRadius">
            <summary>
            Get the radius
            </summary>
            <returns>the radius</returns>
        </member>
        <member name="F:WPS.GraphicsManipulator.BlendState">
            <summary>
            Use Additive for fire and Non-Premultiplied for smoke
            </summary>
        </member>
        <member name="F:WPS.GraphicsManipulator.DepthStencilState">
            <summary>
            Default for normal and DepthRead for particles
            </summary>
        </member>
    </members>
</doc>
